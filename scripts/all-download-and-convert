#!/usr/bin/ruby

HOME         = `echo ~`.chomp
SCRIPTS_DIR  = "#{HOME}/.html/cellwall/scripts"
NAME         = File.basename(__FILE__)
FASTA2TAB    = "#{SCRIPTS_DIR}/convert-fasta-to-tab"
GFF2TAB      = "#{SCRIPTS_DIR}/convert-gff-to-tab"
FILETYPE     = "#{SCRIPTS_DIR}/lookup-filetype-from-stream"

MAX_THREADS  = 20

DATE_OPTIONS = "+%Y-%m-%d" # For example 2009-03-23
DATE         = "/bin/date #{DATE_OPTIONS}"

WGET_OPTIONS = "--quiet -O-" # Download quietly to standard out 
WGET         = "/usr/bin/wget #{WGET_OPTIONS}"

ZCAT         = "/bin/zcat"
BZCAT        = "/bin/bzcat"
TEE          = "/usr/bin/tee"

SOURCE_MAP   = ARGV[0]

if SOURCE_MAP.nil?
  STDERR.puts "Usage: #{NAME} <source_map_file>"
  exit(1)
end

DOWNLOAD_TIMESTAMP = `#{DATE}`.chomp

def run(cmd, tabulizer, type, out_name)
  #return unless out_name =~ /igenic/ # Skip all but this one

  destination =
    "source_#{DOWNLOAD_TIMESTAMP}_#{type.ljust(5,'-')}_#{out_name}"
  `#{cmd} | #{TEE} #{destination} | #{tabulizer} > dumps/#{destination}.tab`
  puts destination
end

def download_and_convert_one(name, url)
  dowload_and_extract = "#{WGET} \"#{url}\""
  loop do
    filetype = `#{dowload_and_extract} | #{FILETYPE}`.chomp

    if filetype =~ /^FASTA/
      run(dowload_and_extract, FASTA2TAB, 'fasta', name)
      break

    elsif filetype =~ /^GFF3/
      run(dowload_and_extract, GFF2TAB, 'gff3', name)
      break

    elsif filetype =~ /^GFF/
      run(dowload_and_extract, GFF2TAB, 'gff', name)
      break

    elsif filetype =~ /^gzip/
      dowload_and_extract += " | #{ZCAT}" 

    elsif filetype =~ /^bzip2/
      dowload_and_extract += " | #{BZCAT}"

    elsif filetype == 'nil'
      STDERR.puts "ERROR: Could not download #{url}"
      break

    else
      STDERR.puts "ERROR: Unknown filetype: #{filetype.inspect} for " +
        "#{dowload_and_extract.inspect}"
      break

    end

  end
end

File.open(SOURCE_MAP) do |f|
  while line = f.gets

    line.strip!
    next if line.empty? or line =~ /^[\s]*#/
    name, url = line.split(/[ \t]/)
    loop do
      if (Thread.list - [Thread.main]).size < MAX_THREADS
        Thread.new{download_and_convert_one(name, url)}
        break
      else
        sleep 5
      end
    end

  end
end

(Thread.list - [Thread.main]).each {|t| t.join}
