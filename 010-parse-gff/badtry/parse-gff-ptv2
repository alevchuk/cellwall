#!/usr/bin/ruby

if ARGV.size != 3
  STDERR.puts "Usage: parse-gff <features.tab> <locations.tab> <tags.tab>"
  exit
end

f_out = ARGV[0]
l_out = ARGV[1]
t_out = ARGV[2]



ACCESSION_TO_SEQUENCE_ID = {}
TO_FEATURE_ID            = {}


FEATURES  = [] # sequence_id | rank | primary_tag
LOCATIONS = [] # sequence_feature_id | rank | start_pos | end_pos | strand
TAGS      = [] # sequence_feature_id | name | value


# PTv2 specific
def adjust_type(type)
  type.sub( 
    "5'-UTR",          "RIGHT_UTR").sub( 
    "3'-UTR",          "LEFT_UTR" ).sub(
    "mRNA", "MODEL").upcase
end

# cat ../source-2010-07-stage02-concat/2010-07_gff* | grep "       Ptrichocarpav2_0        " | awk -F"\t" '// {print $3}' | sort | uniq -c
#   30349 3'-UTR
#   32381 5'-UTR
#  222397 CDS
#  235814 exon
#   41377 gene
#   45778 mRNA


while line = STDIN.gets
  line.chomp!

  next if line =~ / *#/ # Skip Comments

  all = line.split("\t") 
  if all.size != 9
    STDERR.puts "WARNING: Bad format on line #{STDIN.lineno}: #{all.inspect}"
    next
  end
  seqid, source, type, start, end_, score, strand, phase, attributes = all

  # source is always one of these
  raise if !["JGI", "MSU_osa1r6", "Ptrichocarpav2_0", "TAIR9"].include?(source)
  next if source != "Ptrichocarpav2_0" # Skip others


  type = adjust_type(type)
  strand = (strand == "-" ? -1 : 1)

  # PTv2 specific
  next if ["gene"].include?(type) # Skip these

  attr_dict = {}
  attributes.split(';').each {|kv| k,v = kv.split('='); attr_dict[k] = v}

  # PTv2 specific
  accession = (type == "MODEL" ? attr_dict["NAME"] : attr_dict["Parent"])
  # Problem: Parent is ID in MODEL. ID is not what we need. Need NAME.

  # TAIR9 specific
  if accession =~ /,/
    accession = accession.split(",")
    accession = accession.select{|c| !(c =~ /-Protein$/) }
    accession = accession.first
  end
  
  if ACCESSION_TO_SEQUENCE_ID[accession].nil?
    ACCESSION_TO_SEQUENCE_ID[accession] = ACCESSION_TO_SEQUENCE_ID.size
  end
  sequence_id = ACCESSION_TO_SEQUENCE_ID[accession]

  if TO_FEATURE_ID[[accession, type]].nil?
    TO_FEATURE_ID[[accession, type]] = TO_FEATURE_ID.size
  end
  feature_id = TO_FEATURE_ID[[accession, type]]

  # Inserts
  LOCATIONS.push [feature_id, -1, start, end_, strand, phase]

  if FEATURES[feature_id].nil?
    FEATURES[feature_id] = [sequence_id, -1, type]
    TAGS[feature_id]     = [feature_id,
                            type == "MODEL" ? "feat_name" : "model",
                            accession]
  end
end



[[FEATURES,  f_out], [LOCATIONS, l_out], [TAGS, t_out]].each do |data, file|
  File.open(file, 'w') do |f|
    data.each_with_index {|i, id| f.puts(([id] + i).join("\t")) }
  end
end
