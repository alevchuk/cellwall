#!/usr/bin/ruby

HOME         = `echo ~`.chomp
SCRIPTS_DIR  = File.dirname(File.expand_path(__FILE__))
NAME         = File.basename(__FILE__)
FASTA2TAB    = "#{SCRIPTS_DIR}/convert-fasta-to-tab"  # Pipelined
FILETYPE     = "#{SCRIPTS_DIR}/lookup-filetype-from-stream"

MAX_THREADS  = 20

DATE_OPTIONS = "+%Y-%m-%d" # For example 2009-03-23
DATE         = "/bin/date #{DATE_OPTIONS}"

WGET_OPTIONS = "--quiet -O-" # Download quietly to standard out 
WGET         = "/usr/bin/wget #{WGET_OPTIONS}"

ZCAT         = "/bin/zcat"
BZCAT        = "/bin/bzcat"
TEE          = "/usr/bin/tee"
CP           = "/bin/cp"
MV           = "/bin/mv"


OPTIONS      = [] #['--no-tabs']

SOURCE_MAP   = ARGV[0]

if SOURCE_MAP.nil?
  STDERR.puts "Usage: #{NAME} <source_map_file>"
  exit(1)
end

if !(SOURCE_MAP =~ /^Sourcemap-(.*)$/)
  STDERR.puts "Bad filename #{SOURCE_MAP}"
  exit
end
SOURCE_MAP_ID = $1



DOWNLOAD_TIMESTAMP = `#{DATE}`.chomp

def run(cmd, tabulizer, type, out_name)

  destination =
    "source-#{SOURCE_MAP_ID}/#{DOWNLOAD_TIMESTAMP}_" + 
    "#{type.ljust(5,'-')}_#{out_name}"

  if type == "gff" or type == "gff3"
    system("#{cmd} > ./#{destination}")
   
  else
    piped_cmd = "#{cmd} | #{TEE} ./#{destination} " + 
      if OPTIONS.include?('--no-tabs')
        "> /dev/null"
      else 
        "| #{tabulizer} > ./#{destination}.tab"
      end

    system(piped_cmd)
  end

  puts destination
end

def download_and_convert_one(name, url)
  download_and_gunzip_cmd = "#{WGET} \"#{url}\""
  loop do
    filetype = `#{download_and_gunzip_cmd} | #{FILETYPE}`.chomp

    if filetype =~ /^FASTA/
      run(download_and_gunzip_cmd, FASTA2TAB, 'fasta', name)
      break

    elsif filetype =~ /^GFF3/
      run(download_and_gunzip_cmd, nil, 'gff3', name)
      break

    elsif filetype =~ /^GFF/
      run(download_and_gunzip_cmd, nil, 'gff', name)
      break

    elsif filetype =~ /^gzip/
     download_and_gunzip_cmd += " | #{ZCAT}" 

    elsif filetype == 'nil'
      STDERR.puts "ERROR: Could not download #{url}"
      break

    else
      STDERR.puts "ERROR: Unknown filetype: #{filetype.inspect} for " +
        "#{download_and_gunzip_cmd.inspect}"
      break

    end

  end
end



# Make the destination directory
`mkdir ./source-#{SOURCE_MAP_ID}`

File.open(SOURCE_MAP) do |f|
  while line = f.gets

    # TODO: Remove me
    if !(line =~ /_dna-/) # Download only DNA
      next
    end

    line.strip!
    next if line.empty? or line =~ /^[\s]*#/
    name, url = line.split(/[ \t]/)
    loop do
      if (Thread.list - [Thread.main]).size < MAX_THREADS
        Thread.new{download_and_convert_one(name, url)}
        break
      else
        sleep 5
      end
    end

  end
end

(Thread.list - [Thread.main]).each {|t| t.join}
