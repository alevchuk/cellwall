#!/usr/bin/ruby

SCRIPTS_DIR  = File.dirname(File.expand_path(__FILE__))
NAME         = File.basename(__FILE__)

SOURCE_MAP   = ARGV[0]

if SOURCE_MAP.nil?
  STDERR.puts "Usage: #{NAME} <source_map_file>"
  exit(1)
end

if !(File.basename(SOURCE_MAP) =~ /^Sourcemap-(.*)$/)
  STDERR.puts "Bad filename #{SOURCE_MAP}"
  exit
end
SOURCE_MAP_ID = $1

# For Validation
bad = false
bad_but_ask = false


CAT_LISTS = []

File.open(SOURCE_MAP) do |f|
  while line = f.gets

    line.strip!
    next if line.empty? or line =~ /^[\s]*#/

    words = line.split(/[ \t]/)
    next if !words.include?("cat") # skip other directives

    target_base = line.split(' ').first
    sources_patterns = 
      line.split(" ")[2..-1].collect{|i| "#{SOURCE_MAP_ID}_*_#{i}"}

    sources = sources_patterns.collect{|i| Dir.glob(i)}.flatten!


    # Validate

    orig_type = nil
    sources.each do |i|
      if i =~ /#{SOURCE_MAP_ID}_(.*?)_/
        type = $1
        orig_type = type if orig_type.nil?
        if type != orig_type
          bad = true
          STDERR.puts "ERROR: Not all file have the same type for the "+
            "following pattern #{sources_patterns.inspect}"
          STDERR.puts "The source files in question were #{sources.inspect}"
        end
      else
        bad = true
        STDERR.puts "ERROR: source filename format not recognized #{i.inspect}"
      end
    end

    target = "#{SOURCE_MAP_ID}_#{orig_type}_#{target_base}"
    sources = sources - [target] # Important

    if File.exists?(target)
      bad_but_ask = true
      STDERR.puts "ERROR: Target file already exists #{target.inspect}"
    end

    if sources.empty?
      bad = true
      STDERR.puts "\nERROR: Source files do not exists."
      STDERR.puts "NOTICE: source patterns were #{sources_patterns.inspect}"
    end



    # Store
    CAT_LISTS.push [target, sources]
  end
end



exit(1) if bad

if bad_but_ask
  STDERR.puts "\nWARNING: Some file will be overwritten."
  STDERR.puts "Would you still like to continue? (Type 'y' or 'n')"
  exit(1) if STDIN.gets.chomp != "y"
end


# EXECUTE
CAT_LISTS.each do |target, sources|
   `cat #{sources.join(' ')} > #{target}`
   `rm #{sources.join(' ')}`
end

